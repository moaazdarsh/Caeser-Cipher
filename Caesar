alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',' ']

def Caesar_Cipher(text, key):

    #Creating the cipher
    code = []
    key = key % len(alphabet)
    index = -1 * (len(alphabet) - key)
    
    while index < key:
        code.append(alphabet[index])
        index += 1
    
    #using caesar cipher
    encrypted = ""
    for l in text:
        encrypted += (code[alphabet.index(l)])

    return encrypted

def decrypt(encrypted,key):
    key = len(alphabet) - key % len(alphabet)
    return Caesar_Cipher(encrypted, key)

def Complex_Cipher(text, Startingkey, inc):
    #using a cipher with an increasing key
    encrypted = ""
    for l in text:
        encrypted += Caesar_Cipher(l, Startingkey)
        Startingkey += inc
    
    return encrypted

def Complex_decrypt(encrypted, Startingkey, inc):
    Startingkey = len(alphabet) - Startingkey % len(alphabet)
    inc *= -1
    return Complex_Cipher(encrypted, Startingkey, inc)

while True:
    Decrypt_Or_Encrypt = input("d or e?")

    if Decrypt_Or_Encrypt == "e":

        text = input("text:")
        keys = input("key, increment:").split(",")
    
        Starting_Cipher = int(keys[0])
        increment = int(keys[1])
    
        Encrypted_text = Complex_Cipher(text, Starting_Cipher, increment)
        print(Encrypted_text)
    elif Decrypt_Or_Encrypt == "d":

        Encrypted_text = input("encrypted text:")
        keys = input("key, increment:").split(",")

        Starting_Cipher = int(keys[0])
        increment = int(keys[1])

        text = Complex_decrypt(Encrypted_text, Starting_Cipher, increment)

        print(text)